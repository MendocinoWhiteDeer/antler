* antler

License: LGPL 3.0

A convenience library for Vulkan graphics programming. Not ready for use.

To do a debug build ...

#+BEGIN_SRC shell
cmake -S . -B debug-build -DCMAKE_BUILD_TYPE=Debug
cd debug-build
make
#+END_SRC

To do a release build ...

#+BEGIN_SRC shell
cmake -S . -B release-build
cd release-build
make
#+END_SRC

Make sure the working directory is the same as the binary directory when running samples.
Otherwise, the sample program will have trouble finding the needed resources to run properly.
The different sample programs are documented in this README file.

** Learning Resources

https://docs.vulkan.org/guide/latest/vulkan_spec.html

Real‐Time Rendering, 4th Edition by Tomas Akenine-Möller, Eric Haines, Naty Hoffman, Angelo Pesce, Michał Iwanicki, and Sébastien Hillaire

https://saschawillems.de

https://www.songho.ca

https://vkguide.dev

https://vulkan-tutorial.com/

** Dependencies
*** Submodules

GLFW: https://github.com/glfw/glfw

*** System installation

Vulkan SDK

** Samples

Sample documentation: https://github.com/MendocinoWhiteDeer/antler-sample-documentation

*** add-vectors

After providing a seed, this sample uses a compute shader to add two random vectors of a fixed size.

*** conway-game-of-life

The user provides grid dimensions and a seed for the initial random active and dead states of cells in a grid.
Then the grid evolves according to the rules of John Conway's Game of Life. At each time step,

1. Any active cell with one or fewer active cell neighbors deactivates.
2. Any active cell with four or more active cell neighbors deactivates.
3. Any dead cell with three total active cell neighbors activates.

If the cell is active it is rendered as white.

**** References

Gardner, M. (1970). MATHEMATICAL GAMES.
Scientific American, 223(4), 120–123. http://www.jstor.org/stable/24927642

*** fragment-shader-client

A client for running frament shaders. You pass in a path to glsl shader code and the client compiles it and displays with it.
The idea was to make a tiny tool that is a bit similiar to shadertoy, with some provided user inputs.

Further details can be found in the sample documentation.

*** gooch-shading

Gooch shading, a shading model for non-photorealistic rendering.
This example shows a sphere with a directional light source pointing down the screen.
In addition to the lighting, the paper mentions placing an outline around the rendered geometry.
To do this, the program has two render passes; the first corresponds to offscreen scene rendering and the second to edge detection.

**** References

Gooch, Amy, Bruce Gooch, Peter Shirley, and Elaine Cohen. "A non-photorealistic lighting model for automatic technical illustration."
In Proceedings of the 25th annual conference on Computer graphics and interactive techniques, pp. 447-452. 1998.

*** rotating-cube

Simulates a uniform density cube rotating about its center of mass.
The cube grows and shrinks in size periodically at a fixed mass, producing a torque which changes its rotational velocity.
Updates occur with a fixed time step, then we interpolate between update frames for each render frame.
Basic diffuse lighting is used to give the cube some dimensionality.
The light source is a directional light parallel to the displacement between the camera and the cube.

Further details can be found in the sample documentation.

*** hello-quad

A basic quad. Unlke hello-triangle, it uses vertex and index buffers.

*** hello-triangle

A basic program to display a colored triangle.
There are no vertex buffers; the vertex data is hardcoded into the vertex shader.
